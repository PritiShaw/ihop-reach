schema {
  query: Query
}
"Options for entity type."
enum entityTypeEnum {
    celltype
    cellular_component
    family
    gene_or_gene_product
    organ
    protein
    simple_chemical
    site
    species
}
"Options for interaction type."
enum interactionTypeEnum {
    adds_modification
    binds
    decreases_activity
    increases_activity
    inhibits_modification
    translocates
}
"List of GraphQL Queries the API supports"
type Query {
    """
        It returns all documents( maximum 250 per page) present in the database

        Example:  
        ```
        {  
           allDocuments(identifier: "uniprot:Q16595") {  
            pmc_id  
            extracted_information {  
                           participant_b {  
                               identifier  
                            }  
                            participant_a {  
                                identifier  
                            }  
                        }  
           }  
        }  
        ```

        The query will return pmc_id and participant information of documents having identifier uniprot:Q16595
    """
    allDocuments(    
        _id: ID        
        "Page Number"
        page: Int = 1
        "Interaction Type"     
        interaction_type : interactionTypeEnum
        "Negative Information"
        negative_information : Boolean
        "Hypothesis Information"
        hypothesis_information: Boolean 
        "Context Species identifier"
        Species : String
        "Exact match identifier of participant entity"
        identifier : String
        "Participant Entity Text"
        entity_text: String
        "Participant Entity Type"
        entity_type : entityTypeEnum
        "Triggering phrase"
        trigger : String
        "Sentence in the article"
        evidence : String
        "PMCID of Article"
        pmc_id : String
    ): [Document]

#		"""
#            It returns single document matching the Object ID
#
#            Example:
#
#            {\n
#                    document(_id: "5d00179ce3318daa924be884") {  
#                        pmc_id  
#                    }  
#            }  
#
#            The query returns pmc_id of the document specifed as argument
#        """
#        document(
#            """
#            Object ID(_id) of the document
#
#            eg *5d00179ce3318daa924be883*
#            """
#            _id: ID!
#        ): Document

"""
    Returns all the documents of the specified identifier  

    Example:  
    ```
    {  
     documentsByIdentifier(identifier : "chebi:CHEBI:1"){  
        documents{  
            extracted_information{  
                participant_b{  
                    identifier  
                }  
            }  
        }  
      }  
    }  
    ```

    The query will return all documents having participant_a/b.identifier as chebi:CHEBI:1
    """
    documentsByIdentifier(
        "Identifier of the Entity (Case sensitive)"
        identifier: String!
    ): Entities

"It returns details of all Identifiers details present in database."
    allIdentifiers(limit: Int) : [IdentifierDetails]

"It returns Identifier details by identifier"
    identifier(
        "Identifier of the Entity (Case sensitive)"
        identifier: String!
    ): IdentifierDetails

    """
    Returns details of the articles from PubMed using PMCID

    Example:  
    ```
    {  
     getPubMedDetails(pmcid : "4321218"){  
        year  
        pmid  
     }  
    }  
    ```

    The query will return PubMed details of given PMCID
    """
    getPubMedDetails(
        "PubMedCentral id, eg: 4321218, PMC4321218"
        pmcid: String!
    ) : pubMedDetails

#        "It returns all unique identifiers present in database"
#        uniqueIdentifiers(limit: Int): [String]
}

"Object type for documentByIdentifier query. Returns all articles consisting the searched identifier."    
type Entities {
    count : Int
    searchkey : String
    documents: [Document]
}
"Object type for identifier and allIdentifiers queries. Returns identifier details."
type IdentifierDetails {
    "Entity Identifier"
    iden : String
    "Entity Synonyms"
    syn : [String]
    "Entity Type"
    typ: String
}
"Object type for article and allArticles queries. Returns all Biomedical details from the extracted article details."
type Document {	
    _id: ID
    "Relevant text from the article."        
    evidence: [String]
    "Extracted information from the evidence"
    extracted_information: Extracted_information
    model_relation: String
    "PMC ID of the article"
    pmc_id: String
    reader_type: String
    reading_complete: String
    reading_started: String
    score: Int
    submitter: String
    trigger: String
    publication_year: String
    journal_title: String
}
"Contains the extracted information from the evidence text"
type Extracted_information{
    context: Context
    hypothesis_information: Boolean
    interaction_type: interactionTypeEnum
    modifications: [Modification]
    negative_information: Boolean
    "Array containing Details of the relevant Biological entities"
    participant_b: [Participant]
    "Array containing Details of the relevant Biological entities"
    participant_a: [Participant]
    binding_site: [String]
    from_location_id : String
    from_location_text : String
    to_location_id : String
    to_location_text : String
}
"Details of the relevant Biological entities"
type Participant{
    entity_text: String
    entity_type: entityTypeEnum
    features: [Feature]
    in_model: Boolean
    "Unique identifier associated with the entity"
    identifier: String
}
"Contains features of the entity"
type Feature{
    feature_type: String
    modification_type: String
    position: String
    evidence: String
    to_base: String
    site: Int
}
"Shows characteristics of the trigger word"
type Modification{
    modification_type: String
    position: String
}
type Context{
    CellType: [String]
    Organ: [String]
    Species: [String]
}
type pubMedDetails{
    "Title of the journal"
    journal_title : String
    "Publication Year of the jounal"
    year : String
    "Digital Object Identifier"
    doi : String
    "PubMed Central id of the jounal"
    pmcid : String
    "PubMed id of the jounal"
    pmid : String
}
